name: Auto-update from MDN Content

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  
permissions:
  contents: write
  pull-requests: write

jobs:
  auto-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Add MDN content remote if not exists
        run: |
          if ! git remote | grep -q "mdn-content"; then
            git remote add mdn-content https://github.com/mdn/content.git
          fi

      - name: Fetch latest from MDN content
        run: |
          git fetch mdn-content main --no-tags

      - name: Create update branch
        run: |
          BRANCH_NAME="auto-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Merge updates with conflict resolution
        run: |
          # Configure git for merge
          git config user.name "Auto-updater Bot"
          git config user.email "action@github.com"
          
          # Try to merge, but handle conflicts gracefully
          if ! git merge mdn-content/main --no-commit --no-ff; then
            echo "Conflicts detected, resolving automatically..."
            
            # Prefer our versions for core project files
            git checkout --ours package.json README.md index.html || true
            git checkout --ours src/ data/ examples/ docs/ .vscode/ || true
            
            # Accept their changes for content and documentation updates
            git checkout --theirs files/ || true
            
            # Add resolved files
            git add .
          fi
          
          # Complete the merge
          git commit -m "Auto-update: Merge latest changes from MDN content

          - Updated content files from upstream
          - Preserved local project structure
          - Resolved conflicts automatically
          
          Generated by auto-update workflow on $(date)"

      - name: Push update branch
        run: |
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– Auto-update: Latest changes from MDN Content`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## ðŸ”„ Automatic Update from MDN Content

              This PR contains the latest changes from the [MDN Content repository](https://github.com/mdn/content).

              ### What's included:
              - âœ… Latest content updates
              - âœ… Documentation improvements  
              - âœ… Conflict resolution applied
              - âœ… Local project structure preserved

              ### Review needed:
              - [ ] Verify no breaking changes to core functionality
              - [ ] Test data viewer and parser features
              - [ ] Validate JSON data integrity

              **Generated automatically on $(date)**

              ---
              *This PR was created by the auto-update workflow. Review and merge when ready.*`
            });
            
            console.log(\`Created PR #\${pr.number}: \${pr.html_url}\`);

      - name: Auto-merge if no conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the PR we just created
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: \`\${context.repo.owner}:\${process.env.BRANCH_NAME}\`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              const pr = prs[0];
              
              // Check if PR is mergeable
              const { data: prDetails } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              if (prDetails.mergeable && !prDetails.mergeable_state === 'dirty') {
                // Add auto-merge label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['auto-update', 'auto-merge-candidate']
                });
                
                console.log('PR is mergeable and has been labeled for auto-merge review');
              }
            }
